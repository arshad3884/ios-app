//
// ActivitySuggestion.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ActivitySuggestion: Codable, JSONEncodable, Hashable {

    /** The unique identifier of the activity suggestion */
    public var id: String?
    /** The title of the activity suggestion */
    public var title: String?
    /** The description of the activity suggestion */
    public var description: String?
    /** The public URL of the image associated with the activity suggestion */
    public var publicImageUrl: String?
    /** The category of the activity suggestion */
    public var category: String?
    public var location: Location?
    public var expenseRating: ExpenseRating?

    public init(id: String? = nil, title: String? = nil, description: String? = nil, publicImageUrl: String? = nil, category: String? = nil, location: Location? = nil, expenseRating: ExpenseRating? = nil) {
        self.id = id
        self.title = title
        self.description = description
        self.publicImageUrl = publicImageUrl
        self.category = category
        self.location = location
        self.expenseRating = expenseRating
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case title
        case description
        case publicImageUrl
        case category
        case location
        case expenseRating
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(publicImageUrl, forKey: .publicImageUrl)
        try container.encodeIfPresent(category, forKey: .category)
        try container.encodeIfPresent(location, forKey: .location)
        try container.encodeIfPresent(expenseRating, forKey: .expenseRating)
    }
}

