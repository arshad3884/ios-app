//
// Troov.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The primary date object Input fields (POST? vs. GET?) */
public struct Troov: Codable, JSONEncodable, Hashable {

    static let troovIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[\\w\\-\\|]+$/")
    static let matchRequestsCountRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let distinctViewsCountRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let suitabilityScoreRule = NumericRule<Float>(minimum: 0, exclusiveMinimum: false, maximum: 1, exclusiveMaximum: false, multipleOf: nil)
    public var troovId: String?
    public var createdBy: UserProfileWithUserId?
    public var status: TroovStatus?
    public var locationDetails: LocationIndicator?
    public var troovCoreDetails: TroovCoreDetails?
    /** a list of all the match requests */
    public var matchRequests: [TroovMatchRequest]?
    public var matchRequestsCount: Int?
    public var confirmedMatchRequest: TroovMatchRequest?
    public var indexedFields: TroovIndexedFields?
    public var createdAt: Date?
    public var lastUpdatedAt: Date?
    /** a list of all the reviews for the participants of the troov  */
    public var participantReviews: [TroovReview]?
    /** a list of all the user ids which have viewed this troov  */
    public var viewedBy: [String]?
    public var distinctViewsCount: Int?
    /** The suitability score of the troov from 0 to 1 where 0 is the worst and 1 is the best  */
    public var suitabilityScore: Float?
    /** a list of all the activity sub labels associated with the troov  */
    public var activitySubLabels: [TroovActivity]?
    /** a list of all the activity categories associated with the troov  */
    public var activityCategories: [TroovActivityCategory]?
    public var isTestTroov: Bool? = false

    public init(troovId: String? = nil, createdBy: UserProfileWithUserId? = nil, status: TroovStatus? = nil, locationDetails: LocationIndicator? = nil, troovCoreDetails: TroovCoreDetails? = nil, matchRequests: [TroovMatchRequest]? = nil, matchRequestsCount: Int? = nil, confirmedMatchRequest: TroovMatchRequest? = nil, indexedFields: TroovIndexedFields? = nil, createdAt: Date? = nil, lastUpdatedAt: Date? = nil, participantReviews: [TroovReview]? = nil, viewedBy: [String]? = nil, distinctViewsCount: Int? = nil, suitabilityScore: Float? = nil, activitySubLabels: [TroovActivity]? = nil, activityCategories: [TroovActivityCategory]? = nil, isTestTroov: Bool? = false) {
        self.troovId = troovId
        self.createdBy = createdBy
        self.status = status
        self.locationDetails = locationDetails
        self.troovCoreDetails = troovCoreDetails
        self.matchRequests = matchRequests
        self.matchRequestsCount = matchRequestsCount
        self.confirmedMatchRequest = confirmedMatchRequest
        self.indexedFields = indexedFields
        self.createdAt = createdAt
        self.lastUpdatedAt = lastUpdatedAt
        self.participantReviews = participantReviews
        self.viewedBy = viewedBy
        self.distinctViewsCount = distinctViewsCount
        self.suitabilityScore = suitabilityScore
        self.activitySubLabels = activitySubLabels
        self.activityCategories = activityCategories
        self.isTestTroov = isTestTroov
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case troovId
        case createdBy
        case status
        case locationDetails
        case troovCoreDetails
        case matchRequests
        case matchRequestsCount
        case confirmedMatchRequest
        case indexedFields
        case createdAt
        case lastUpdatedAt
        case participantReviews
        case viewedBy
        case distinctViewsCount
        case suitabilityScore
        case activitySubLabels
        case activityCategories
        case isTestTroov
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(troovId, forKey: .troovId)
        try container.encodeIfPresent(createdBy, forKey: .createdBy)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(locationDetails, forKey: .locationDetails)
        try container.encodeIfPresent(troovCoreDetails, forKey: .troovCoreDetails)
        try container.encodeIfPresent(matchRequests, forKey: .matchRequests)
        try container.encodeIfPresent(matchRequestsCount, forKey: .matchRequestsCount)
        try container.encodeIfPresent(confirmedMatchRequest, forKey: .confirmedMatchRequest)
        try container.encodeIfPresent(indexedFields, forKey: .indexedFields)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(lastUpdatedAt, forKey: .lastUpdatedAt)
        try container.encodeIfPresent(participantReviews, forKey: .participantReviews)
        try container.encodeIfPresent(viewedBy, forKey: .viewedBy)
        try container.encodeIfPresent(distinctViewsCount, forKey: .distinctViewsCount)
        try container.encodeIfPresent(suitabilityScore, forKey: .suitabilityScore)
        try container.encodeIfPresent(activitySubLabels, forKey: .activitySubLabels)
        try container.encodeIfPresent(activityCategories, forKey: .activityCategories)
        try container.encodeIfPresent(isTestTroov, forKey: .isTestTroov)
    }
}

