//
// LocationIndicator.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Instead of using the composition anyOf because it creates additional complexity to support on the client side, we define a composition class which handles both the case where the location is provided and hidden. When location is hidden, then only the location field will be empty.  */
public struct LocationIndicator: Codable, JSONEncodable, Hashable {

    /** indicates if the location is hidden from the consumer */
    public var hidden: Bool = false
    public var queryableLocation: LocationQueryable?
    public var location: Location?
    public var distanceFromSearchLocation: LocationIndicatorDistanceFromSearchLocation?

    public init(hidden: Bool = false, queryableLocation: LocationQueryable? = nil, location: Location? = nil, distanceFromSearchLocation: LocationIndicatorDistanceFromSearchLocation? = nil) {
        self.hidden = hidden
        self.queryableLocation = queryableLocation
        self.location = location
        self.distanceFromSearchLocation = distanceFromSearchLocation
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case hidden
        case queryableLocation
        case location
        case distanceFromSearchLocation
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(hidden, forKey: .hidden)
        try container.encodeIfPresent(queryableLocation, forKey: .queryableLocation)
        try container.encodeIfPresent(location, forKey: .location)
        try container.encodeIfPresent(distanceFromSearchLocation, forKey: .distanceFromSearchLocation)
    }
}

