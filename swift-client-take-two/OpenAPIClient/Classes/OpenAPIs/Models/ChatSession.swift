//
// ChatSession.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** a logical container representing all chat messages related to a troov */
public struct ChatSession: Codable, JSONEncodable, Hashable {

    public enum Status: String, Codable, CaseIterable {
        case openingRequest = "OPENING_REQUEST"
        case active = "ACTIVE"
        case nonActive = "NON_ACTIVE"
        case blocked = "BLOCKED"
    }
    static let idRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[\\w\\-\\|]+$/")
    static let troovIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[\\w\\-\\|]+$/")
    static let troovCreatorUserIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[\\w\\-\\|]+$/")
    static let mostRecentChatUserIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[\\w\\-\\|]+$/")
    public var id: String?
    /** Status of the match request:  * OPENING_REQUEST  | User has issued a request to join a troov but the troov creator has not yet responded  * ACTIVE           | Active chat between the participants  * NON_ACTIVE       | Non active chat between the participants  * BLOCKED          | One of the chat participants has blocked the other  */
    public var status: Status? = .active
    /** the id of the troov this chat session is associated with */
    public var troovId: String?
    /** the user id of the troov creator */
    public var troovCreatorUserId: String?
    /** a list of all the chat session participants user ids */
    public var participantUserIds: [String]?
    /** a list of all the chat session participants profiles */
    public var participantProfiles: [UserProfileWithUserId]?
    /** a list of all the chats in this chat session */
    public var messages: [Chat]?
    public var createdAt: Date?
    public var lastUpdatedAt: Date?
    /** the user id of the user who sent the most recent chat */
    public var mostRecentChatUserId: String?
    /** an array of user ids and when they last viewed the chat session */
    public var lastViewedBy: [ChatSessionLastViewedByInner]?
    /** whether this is an admin chat */
    public var isAdminChatSession: Bool? = false

    public init(id: String? = nil, status: Status? = .active, troovId: String? = nil, troovCreatorUserId: String? = nil, participantUserIds: [String]? = nil, participantProfiles: [UserProfileWithUserId]? = nil, messages: [Chat]? = nil, createdAt: Date? = nil, lastUpdatedAt: Date? = nil, mostRecentChatUserId: String? = nil, lastViewedBy: [ChatSessionLastViewedByInner]? = nil, isAdminChatSession: Bool? = false) {
        self.id = id
        self.status = status
        self.troovId = troovId
        self.troovCreatorUserId = troovCreatorUserId
        self.participantUserIds = participantUserIds
        self.participantProfiles = participantProfiles
        self.messages = messages
        self.createdAt = createdAt
        self.lastUpdatedAt = lastUpdatedAt
        self.mostRecentChatUserId = mostRecentChatUserId
        self.lastViewedBy = lastViewedBy
        self.isAdminChatSession = isAdminChatSession
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case status
        case troovId
        case troovCreatorUserId
        case participantUserIds
        case participantProfiles
        case messages
        case createdAt
        case lastUpdatedAt
        case mostRecentChatUserId
        case lastViewedBy
        case isAdminChatSession
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(troovId, forKey: .troovId)
        try container.encodeIfPresent(troovCreatorUserId, forKey: .troovCreatorUserId)
        try container.encodeIfPresent(participantUserIds, forKey: .participantUserIds)
        try container.encodeIfPresent(participantProfiles, forKey: .participantProfiles)
        try container.encodeIfPresent(messages, forKey: .messages)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(lastUpdatedAt, forKey: .lastUpdatedAt)
        try container.encodeIfPresent(mostRecentChatUserId, forKey: .mostRecentChatUserId)
        try container.encodeIfPresent(lastViewedBy, forKey: .lastViewedBy)
        try container.encodeIfPresent(isAdminChatSession, forKey: .isAdminChatSession)
    }
}

