//
// Notification.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** a user notification */
public struct Notification: Codable, JSONEncodable, Hashable {

    public enum Status: String, Codable, CaseIterable {
        case read = "READ"
        case unread = "UNREAD"
        case cancelled = "CANCELLED"
    }
    static let idRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[\\w\\-\\|]+$/")
    static let userIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[\\w\\-\\|]+$/")
    static let messageRule = StringRule(minLength: 0, maxLength: 500, pattern: "/(\\u00a9|\\u00ae|[\\u2000-\\u3300]|\\ud83c[\\ud000-\\udfff]|\\ud83d[\\ud000-\\udfff]|\\ud83e[\\ud000-\\udfff]|\\w|\\s|\\d|[\\\\?\\\\!\\\\.\\\\$\\\\,\\\\%\\\\&\\\\\"])/")
    static let importanceRatingRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 2, exclusiveMaximum: false, multipleOf: nil)
    public var id: String?
    public var userId: String?
    public var message: String?
    public var apiUrlUpdatePaths: [String]?
    public var type: NotificationType?
    /** lower numbers are more important */
    public var importanceRating: Int? = 2
    public var createdAt: Date?
    /** Status of the notification:  * READ      | The user has read the notification  * UNREAD    | The user has not read the notification  * CANCELLED | The notification has been cancelled  */
    public var status: Status? = .cancelled
    /** the last time at which the status was updated */
    public var statusUpdatedAt: Date?

    public init(id: String? = nil, userId: String? = nil, message: String? = nil, apiUrlUpdatePaths: [String]? = nil, type: NotificationType? = nil, importanceRating: Int? = 2, createdAt: Date? = nil, status: Status? = .cancelled, statusUpdatedAt: Date? = nil) {
        self.id = id
        self.userId = userId
        self.message = message
        self.apiUrlUpdatePaths = apiUrlUpdatePaths
        self.type = type
        self.importanceRating = importanceRating
        self.createdAt = createdAt
        self.status = status
        self.statusUpdatedAt = statusUpdatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case userId
        case message
        case apiUrlUpdatePaths
        case type
        case importanceRating
        case createdAt
        case status
        case statusUpdatedAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(message, forKey: .message)
        try container.encodeIfPresent(apiUrlUpdatePaths, forKey: .apiUrlUpdatePaths)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(importanceRating, forKey: .importanceRating)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(statusUpdatedAt, forKey: .statusUpdatedAt)
    }
}

