//
// ProfileMedia.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** represents any form of media associated with a profile */
public struct ProfileMedia: Codable, JSONEncodable, Hashable {

    public enum MediaType: String, Codable, CaseIterable {
        case image = "IMAGE"
        case video = "VIDEO"
        case audio = "AUDIO"
    }
    /** A unique reference to the Image when it is being created. */
    public var mediaId: String?
    public var mediaType: MediaType?
    /** The relative ordering of the profile media */
    public var rank: Int?
    /** size of the file in bytes */
    public var size: Double?
    /** The location of the media. This is set internally and only included on return responses. */
    public var mediaUrl: String?
    public var createdAt: Date?

    public init(mediaId: String? = nil, mediaType: MediaType? = nil, rank: Int? = nil, size: Double? = nil, mediaUrl: String? = nil, createdAt: Date? = nil) {
        self.mediaId = mediaId
        self.mediaType = mediaType
        self.rank = rank
        self.size = size
        self.mediaUrl = mediaUrl
        self.createdAt = createdAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case mediaId
        case mediaType
        case rank
        case size
        case mediaUrl
        case createdAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(mediaId, forKey: .mediaId)
        try container.encodeIfPresent(mediaType, forKey: .mediaType)
        try container.encodeIfPresent(rank, forKey: .rank)
        try container.encodeIfPresent(size, forKey: .size)
        try container.encodeIfPresent(mediaUrl, forKey: .mediaUrl)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
    }
}

