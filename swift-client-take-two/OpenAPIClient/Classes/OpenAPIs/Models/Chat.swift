//
// Chat.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** a chat message from one user to another user */
public struct Chat: Codable, JSONEncodable, Hashable {

    static let idRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[\\w\\-\\|]+$/")
    static let createdByUserIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[\\w\\-\\|]+$/")
    static let createdByFirstNameRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[A-Za-z0-9 ,.'-]+$/")
    static let messageContentRule = StringRule(minLength: 0, maxLength: 2000, pattern: "/(\\u00a9|\\u00ae|[\\u2000-\\u3300]|\\ud83c[\\ud000-\\udfff]|\\ud83d[\\ud000-\\udfff]|\\ud83e[\\ud000-\\udfff]|\\w|\\s|\\d|[\\\\?\\\\!\\\\.\\\\$\\\\,\\\\%\\\\&\\\\\"])/")
    public var id: String?
    public var createdAt: Date?
    /** the id of the user who created this chat */
    public var createdByUserId: String?
    /** the first name of the user who created this chat */
    public var createdByFirstName: String?
    public var messageContent: String?
    /** a list of all the user ids who have liked this chat */
    public var likedByUserIds: [String]?

    public init(id: String? = nil, createdAt: Date? = nil, createdByUserId: String? = nil, createdByFirstName: String? = nil, messageContent: String? = nil, likedByUserIds: [String]? = nil) {
        self.id = id
        self.createdAt = createdAt
        self.createdByUserId = createdByUserId
        self.createdByFirstName = createdByFirstName
        self.messageContent = messageContent
        self.likedByUserIds = likedByUserIds
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case createdAt
        case createdByUserId
        case createdByFirstName
        case messageContent
        case likedByUserIds
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(createdByUserId, forKey: .createdByUserId)
        try container.encodeIfPresent(createdByFirstName, forKey: .createdByFirstName)
        try container.encodeIfPresent(messageContent, forKey: .messageContent)
        try container.encodeIfPresent(likedByUserIds, forKey: .likedByUserIds)
    }
}

