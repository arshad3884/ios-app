//
// UserProfileWithUserId.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UserProfileWithUserId: Codable, JSONEncodable, Hashable {

    static let ageRule = NumericRule<Int64>(minimum: 18, exclusiveMinimum: false, maximum: 100, exclusiveMaximum: false, multipleOf: nil)
    static let bioRule = StringRule(minLength: 0, maxLength: 300, pattern: "/(\\u00a9|\\u00ae|[\\u2000-\\u3300]|\\ud83c[\\ud000-\\udfff]|\\ud83d[\\ud000-\\udfff]|\\ud83e[\\ud000-\\udfff]|\\w|\\s|\\d|[\\\\?\\\\!\\\\.\\\\$\\\\,\\\\%\\\\&\\\\\"])/")
    static let companyRule = StringRule(minLength: 0, maxLength: 75, pattern: "/^$|[A-Za-z0-9 .]+$/")
    static let firstNameRule = StringRule(minLength: 0, maxLength: 75, pattern: "/^[A-Za-z0-9 ,.'-]+$/")
    static let occupationRule = StringRule(minLength: 0, maxLength: 75, pattern: "/^$|[A-Za-z0-9 .]+$/")
    static let userIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[\\w\\-\\|]+$/")
    public var age: Int64?
    public var activityInterests: [TroovActivity]?
    public var almaMater: [String]?
    public var bio: String?
    public var company: String?
    public var education: Education?
    public var ethnicity: [Ethnicity]?
    public var firstName: String?
    public var gender: Gender?
    public var height: UserProfileHeight?
    public var interestedIn: [Gender]?
    public var lowResThumbnail: ProfileMedia?
    public var numDatesCompleted: Int64?
    public var numDatesFlaked: Int64?
    public var occupation: String?
    public var profileMedia: [ProfileMedia]?
    public var politics: PoliticalAffiliation?
    public var relationshipInterests: [RelationshipInterest]?
    public var religion: Religion?
    /** indicates whether or not the user's profile is verified */
    public var verified: Bool?
    public var userId: String

    public init(age: Int64? = nil, activityInterests: [TroovActivity]? = nil, almaMater: [String]? = nil, bio: String? = nil, company: String? = nil, education: Education? = nil, ethnicity: [Ethnicity]? = nil, firstName: String? = nil, gender: Gender? = nil, height: UserProfileHeight? = nil, interestedIn: [Gender]? = nil, lowResThumbnail: ProfileMedia? = nil, numDatesCompleted: Int64? = nil, numDatesFlaked: Int64? = nil, occupation: String? = nil, profileMedia: [ProfileMedia]? = nil, politics: PoliticalAffiliation? = nil, relationshipInterests: [RelationshipInterest]? = nil, religion: Religion? = nil, verified: Bool? = nil, userId: String) {
        self.age = age
        self.activityInterests = activityInterests
        self.almaMater = almaMater
        self.bio = bio
        self.company = company
        self.education = education
        self.ethnicity = ethnicity
        self.firstName = firstName
        self.gender = gender
        self.height = height
        self.interestedIn = interestedIn
        self.lowResThumbnail = lowResThumbnail
        self.numDatesCompleted = numDatesCompleted
        self.numDatesFlaked = numDatesFlaked
        self.occupation = occupation
        self.profileMedia = profileMedia
        self.politics = politics
        self.relationshipInterests = relationshipInterests
        self.religion = religion
        self.verified = verified
        self.userId = userId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case age
        case activityInterests
        case almaMater
        case bio
        case company
        case education
        case ethnicity
        case firstName
        case gender
        case height
        case interestedIn
        case lowResThumbnail
        case numDatesCompleted
        case numDatesFlaked
        case occupation
        case profileMedia
        case politics
        case relationshipInterests
        case religion
        case verified
        case userId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(age, forKey: .age)
        try container.encodeIfPresent(activityInterests, forKey: .activityInterests)
        try container.encodeIfPresent(almaMater, forKey: .almaMater)
        try container.encodeIfPresent(bio, forKey: .bio)
        try container.encodeIfPresent(company, forKey: .company)
        try container.encodeIfPresent(education, forKey: .education)
        try container.encodeIfPresent(ethnicity, forKey: .ethnicity)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(gender, forKey: .gender)
        try container.encodeIfPresent(height, forKey: .height)
        try container.encodeIfPresent(interestedIn, forKey: .interestedIn)
        try container.encodeIfPresent(lowResThumbnail, forKey: .lowResThumbnail)
        try container.encodeIfPresent(numDatesCompleted, forKey: .numDatesCompleted)
        try container.encodeIfPresent(numDatesFlaked, forKey: .numDatesFlaked)
        try container.encodeIfPresent(occupation, forKey: .occupation)
        try container.encodeIfPresent(profileMedia, forKey: .profileMedia)
        try container.encodeIfPresent(politics, forKey: .politics)
        try container.encodeIfPresent(relationshipInterests, forKey: .relationshipInterests)
        try container.encodeIfPresent(religion, forKey: .religion)
        try container.encodeIfPresent(verified, forKey: .verified)
        try container.encode(userId, forKey: .userId)
    }
}

