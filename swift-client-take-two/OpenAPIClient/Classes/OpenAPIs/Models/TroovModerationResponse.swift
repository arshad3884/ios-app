//
// TroovModerationResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TroovModerationResponse: Codable, JSONEncodable, Hashable {

    static let modelUsedRule = StringRule(minLength: 0, maxLength: 100, pattern: nil)
    static let suitabilityScoreRule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: 10, exclusiveMaximum: false, multipleOf: nil)
    static let scoreJustificationRule = StringRule(minLength: 0, maxLength: 300, pattern: nil)
    /** The m  */
    public var modelUsed: String?
    /** Indicates if the troov should be moderated  */
    public var moderate: Bool?
    /** The suitability score of the troov  */
    public var suitabilityScore: Double?
    /** The justification for the suitability score  */
    public var scoreJustification: String?
    public var categoryScores: [TroovModerationResponseCategoryScoresInner]?

    public init(modelUsed: String? = nil, moderate: Bool? = nil, suitabilityScore: Double? = nil, scoreJustification: String? = nil, categoryScores: [TroovModerationResponseCategoryScoresInner]? = nil) {
        self.modelUsed = modelUsed
        self.moderate = moderate
        self.suitabilityScore = suitabilityScore
        self.scoreJustification = scoreJustification
        self.categoryScores = categoryScores
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case modelUsed
        case moderate
        case suitabilityScore
        case scoreJustification
        case categoryScores
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(modelUsed, forKey: .modelUsed)
        try container.encodeIfPresent(moderate, forKey: .moderate)
        try container.encodeIfPresent(suitabilityScore, forKey: .suitabilityScore)
        try container.encodeIfPresent(scoreJustification, forKey: .scoreJustification)
        try container.encodeIfPresent(categoryScores, forKey: .categoryScores)
    }
}

