//
// TroovCoreDetailFilterAttributes.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** all filters relating to the details of the troov */
public struct TroovCoreDetailFilterAttributes: Codable, JSONEncodable, Hashable {

    public enum FilterTimezone: String, Codable, CaseIterable {
        case gmt = "GMT"
        case edt = "EDT"
        case est = "EST"
        case cdt = "CDT"
        case cst = "CST"
        case mdt = "MDT"
        case mst = "MST"
        case pdt = "PDT"
        case pst = "PST"
    }
    public var originCoordinates: Coordinates?
    public var maximumDistance: TroovCoreDetailFilterAttributesMaximumDistance?
    public var daysOfWeek: [DayOfWeek]?
    public var dateStartTimings: [TimeOfDay]?
    public var expenseRatings: [ExpenseRating]?
    public var relationshipInterests: [RelationshipInterest]?
    /** start of range filter for date start times */
    public var startTimeRange: Date?
    /** end of range filter for date start times */
    public var endTimeRange: Date?
    /** * GMT: Greenwich Mean Time (displays the same time as UTC) * EDT: America/New_York - Eastern Daylight Time - summer/spring * EST: America/New_York - Eastern Standard Time - winter/autumn * CDT: America/Chicago - Central Daylight Time - summer/spring * CST: America/Chicago - Central Standard Time - winter/autumn * MDT: America/Denver - Mountain Daylight Time - summer/spring * MST: America/Denver - Mountain Standard Time - winter/autumn * PDT: America/Los_Angeles - Pacific Daylight Time - summer/spring * PST: America/Los_Angeles - Pacific Standard Time - winter/autumn  */
    public var filterTimezone: FilterTimezone? = .est

    public init(originCoordinates: Coordinates? = nil, maximumDistance: TroovCoreDetailFilterAttributesMaximumDistance? = nil, daysOfWeek: [DayOfWeek]? = nil, dateStartTimings: [TimeOfDay]? = nil, expenseRatings: [ExpenseRating]? = nil, relationshipInterests: [RelationshipInterest]? = nil, startTimeRange: Date? = nil, endTimeRange: Date? = nil, filterTimezone: FilterTimezone? = .est) {
        self.originCoordinates = originCoordinates
        self.maximumDistance = maximumDistance
        self.daysOfWeek = daysOfWeek
        self.dateStartTimings = dateStartTimings
        self.expenseRatings = expenseRatings
        self.relationshipInterests = relationshipInterests
        self.startTimeRange = startTimeRange
        self.endTimeRange = endTimeRange
        self.filterTimezone = filterTimezone
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case originCoordinates
        case maximumDistance
        case daysOfWeek
        case dateStartTimings
        case expenseRatings
        case relationshipInterests
        case startTimeRange
        case endTimeRange
        case filterTimezone
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(originCoordinates, forKey: .originCoordinates)
        try container.encodeIfPresent(maximumDistance, forKey: .maximumDistance)
        try container.encodeIfPresent(daysOfWeek, forKey: .daysOfWeek)
        try container.encodeIfPresent(dateStartTimings, forKey: .dateStartTimings)
        try container.encodeIfPresent(expenseRatings, forKey: .expenseRatings)
        try container.encodeIfPresent(relationshipInterests, forKey: .relationshipInterests)
        try container.encodeIfPresent(startTimeRange, forKey: .startTimeRange)
        try container.encodeIfPresent(endTimeRange, forKey: .endTimeRange)
        try container.encodeIfPresent(filterTimezone, forKey: .filterTimezone)
    }
}

