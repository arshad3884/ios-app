//
// User.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** All data related to a User in the application */
public struct User: Codable, JSONEncodable, Hashable {

    static let userIdRule = StringRule(minLength: 25, maxLength: 75, pattern: "/^[\\w\\-\\|]+$/")
    static let firstNameRule = StringRule(minLength: 1, maxLength: 75, pattern: "/^[A-Za-z0-9 ,.'-]+$/")
    static let lastNameRule = StringRule(minLength: 0, maxLength: 75, pattern: "/^[A-Za-z0-9 ,.'-]+$/")
    static let iOSDeviceTokenRule = StringRule(minLength: 30, maxLength: 180, pattern: "/^[A-Za-z0-9 ,.'-]+$/")
    /** represents a unique identifier for all users in the application */
    public var userId: String
    public var firstName: String?
    public var lastName: String?
    /** indicates if the user's account is active */
    public var active: Bool?
    public var dateOfBirth: OpenAPIDateWithoutTime?
    public var email: String?
    public var heardOfTroovFrom: MarketingChannels?
    public var phoneNumber: PhoneNumber?
    /** users can use app credits for access to enhanced features */
    public var numCredits: Int64?
    public var phoneNumberVerification: PhoneVerification?
    /** user iOS device 32 char token found under didRegisterForRemoteNotificationsWithDeviceToken (but larger on simulator) */
    public var iOSDeviceToken: String?
    public var lastLoggedInAt: Date?
    public var lastUpdatedAt: Date?
    public var createdAt: Date?
    public var userProfile: UserProfile?
    /** all the users which this user has blocked */
    public var blockedUsers: [BlockUserRequest]?
    public var registrationStatus: RegistrationStep?
    /** all the reviews for the user */
    public var troovReviews: [TroovReview]?
    public var usageStatistics: UsageStatistics?
    public var isTestUser: Bool? = false

    public init(userId: String, firstName: String? = nil, lastName: String? = nil, active: Bool? = nil, dateOfBirth: OpenAPIDateWithoutTime? = nil, email: String? = nil, heardOfTroovFrom: MarketingChannels? = nil, phoneNumber: PhoneNumber? = nil, numCredits: Int64? = nil, phoneNumberVerification: PhoneVerification? = nil, iOSDeviceToken: String? = nil, lastLoggedInAt: Date? = nil, lastUpdatedAt: Date? = nil, createdAt: Date? = nil, userProfile: UserProfile? = nil, blockedUsers: [BlockUserRequest]? = nil, registrationStatus: RegistrationStep? = nil, troovReviews: [TroovReview]? = nil, usageStatistics: UsageStatistics? = nil, isTestUser: Bool? = false) {
        self.userId = userId
        self.firstName = firstName
        self.lastName = lastName
        self.active = active
        self.dateOfBirth = dateOfBirth
        self.email = email
        self.heardOfTroovFrom = heardOfTroovFrom
        self.phoneNumber = phoneNumber
        self.numCredits = numCredits
        self.phoneNumberVerification = phoneNumberVerification
        self.iOSDeviceToken = iOSDeviceToken
        self.lastLoggedInAt = lastLoggedInAt
        self.lastUpdatedAt = lastUpdatedAt
        self.createdAt = createdAt
        self.userProfile = userProfile
        self.blockedUsers = blockedUsers
        self.registrationStatus = registrationStatus
        self.troovReviews = troovReviews
        self.usageStatistics = usageStatistics
        self.isTestUser = isTestUser
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case userId
        case firstName
        case lastName
        case active
        case dateOfBirth
        case email
        case heardOfTroovFrom
        case phoneNumber
        case numCredits
        case phoneNumberVerification
        case iOSDeviceToken
        case lastLoggedInAt
        case lastUpdatedAt
        case createdAt
        case userProfile
        case blockedUsers
        case registrationStatus
        case troovReviews
        case usageStatistics
        case isTestUser
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(userId, forKey: .userId)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(active, forKey: .active)
        try container.encodeIfPresent(dateOfBirth, forKey: .dateOfBirth)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(heardOfTroovFrom, forKey: .heardOfTroovFrom)
        try container.encodeIfPresent(phoneNumber, forKey: .phoneNumber)
        try container.encodeIfPresent(numCredits, forKey: .numCredits)
        try container.encodeIfPresent(phoneNumberVerification, forKey: .phoneNumberVerification)
        try container.encodeIfPresent(iOSDeviceToken, forKey: .iOSDeviceToken)
        try container.encodeIfPresent(lastLoggedInAt, forKey: .lastLoggedInAt)
        try container.encodeIfPresent(lastUpdatedAt, forKey: .lastUpdatedAt)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(userProfile, forKey: .userProfile)
        try container.encodeIfPresent(blockedUsers, forKey: .blockedUsers)
        try container.encodeIfPresent(registrationStatus, forKey: .registrationStatus)
        try container.encodeIfPresent(troovReviews, forKey: .troovReviews)
        try container.encodeIfPresent(usageStatistics, forKey: .usageStatistics)
        try container.encodeIfPresent(isTestUser, forKey: .isTestUser)
    }
}

