//
// TroovReview.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The troov review object  */
public struct TroovReview: Codable, JSONEncodable, Hashable {

    static let troovReviewIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[\\w\\-\\|]+$/")
    static let reviewerUserIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[\\w\\-\\|]+$/")
    static let troovCreatorUserIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[\\w\\-\\|]+$/")
    static let ratingRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 5, exclusiveMaximum: false, multipleOf: nil)
    static let notesRule = StringRule(minLength: 0, maxLength: 300, pattern: nil)
    public var troovReviewId: String?
    public var reviewerUserId: String?
    public var troovCreatorUserId: String?
    /** The rating of the troov from 1 to 5 where 1 is the worst and 5 is the best  */
    public var rating: Int?
    /** The notes of the troov review  */
    public var notes: String?
    /** Indicates if all participants showed up to the troov  */
    public var allParticipantsShowedUp: Bool?
    /** Indicates if the participants matched their profile attributes (e.g. name, profile photos, etc.)  */
    public var participantsMatchedProfileAttributes: Bool?
    public var createdAt: Date?
    public var lastUpdatedAt: Date?

    public init(troovReviewId: String? = nil, reviewerUserId: String? = nil, troovCreatorUserId: String? = nil, rating: Int? = nil, notes: String? = nil, allParticipantsShowedUp: Bool? = nil, participantsMatchedProfileAttributes: Bool? = nil, createdAt: Date? = nil, lastUpdatedAt: Date? = nil) {
        self.troovReviewId = troovReviewId
        self.reviewerUserId = reviewerUserId
        self.troovCreatorUserId = troovCreatorUserId
        self.rating = rating
        self.notes = notes
        self.allParticipantsShowedUp = allParticipantsShowedUp
        self.participantsMatchedProfileAttributes = participantsMatchedProfileAttributes
        self.createdAt = createdAt
        self.lastUpdatedAt = lastUpdatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case troovReviewId
        case reviewerUserId
        case troovCreatorUserId
        case rating
        case notes
        case allParticipantsShowedUp
        case participantsMatchedProfileAttributes
        case createdAt
        case lastUpdatedAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(troovReviewId, forKey: .troovReviewId)
        try container.encodeIfPresent(reviewerUserId, forKey: .reviewerUserId)
        try container.encodeIfPresent(troovCreatorUserId, forKey: .troovCreatorUserId)
        try container.encodeIfPresent(rating, forKey: .rating)
        try container.encodeIfPresent(notes, forKey: .notes)
        try container.encodeIfPresent(allParticipantsShowedUp, forKey: .allParticipantsShowedUp)
        try container.encodeIfPresent(participantsMatchedProfileAttributes, forKey: .participantsMatchedProfileAttributes)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(lastUpdatedAt, forKey: .lastUpdatedAt)
    }
}

