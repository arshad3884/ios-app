//
// ProfileFilterAttributes.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** properties on a User&#39;s Profile which are filterable */
public struct ProfileFilterAttributes: Codable, JSONEncodable, Hashable {

    static let minAgeRule = NumericRule<Int64>(minimum: 18, exclusiveMinimum: false, maximum: 100, exclusiveMaximum: false, multipleOf: nil)
    static let maxAgeRule = NumericRule<Int64>(minimum: 18, exclusiveMinimum: false, maximum: 100, exclusiveMaximum: false, multipleOf: nil)
    public var minAge: Int64? = 18
    public var maxAge: Int64? = 100
    public var educationHistory: [Education]?
    public var ethnicity: [Ethnicity]?
    public var gender: [Gender]?
    public var minHeight: ProfileFilterAttributesMinHeight?
    public var maxHeight: ProfileFilterAttributesMinHeight?
    public var politics: [PoliticalAffiliation]?
    public var religion: [Religion]?
    /** indicates whether or not the user's profile is verified */
    public var verified: Bool? = false

    public init(minAge: Int64? = 18, maxAge: Int64? = 100, educationHistory: [Education]? = nil, ethnicity: [Ethnicity]? = nil, gender: [Gender]? = nil, minHeight: ProfileFilterAttributesMinHeight? = nil, maxHeight: ProfileFilterAttributesMinHeight? = nil, politics: [PoliticalAffiliation]? = nil, religion: [Religion]? = nil, verified: Bool? = false) {
        self.minAge = minAge
        self.maxAge = maxAge
        self.educationHistory = educationHistory
        self.ethnicity = ethnicity
        self.gender = gender
        self.minHeight = minHeight
        self.maxHeight = maxHeight
        self.politics = politics
        self.religion = religion
        self.verified = verified
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case minAge
        case maxAge
        case educationHistory
        case ethnicity
        case gender
        case minHeight
        case maxHeight
        case politics
        case religion
        case verified
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(minAge, forKey: .minAge)
        try container.encodeIfPresent(maxAge, forKey: .maxAge)
        try container.encodeIfPresent(educationHistory, forKey: .educationHistory)
        try container.encodeIfPresent(ethnicity, forKey: .ethnicity)
        try container.encodeIfPresent(gender, forKey: .gender)
        try container.encodeIfPresent(minHeight, forKey: .minHeight)
        try container.encodeIfPresent(maxHeight, forKey: .maxHeight)
        try container.encodeIfPresent(politics, forKey: .politics)
        try container.encodeIfPresent(religion, forKey: .religion)
        try container.encodeIfPresent(verified, forKey: .verified)
    }
}

