//
// LocationQueryable.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Used to query for location and combines hidden and visible location information. Note that name and placeId will be null if the location is hidden and the queryableCoordinates and queryableGeoHash will be based of a randomized centroid.  */
public struct LocationQueryable: Codable, JSONEncodable, Hashable {

    static let nameRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.+$/")
    static let placeIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[\\w\\-\\|]+$/")
    public var name: String?
    public var placeId: String?
    public var queryableCoordinates: Coordinates?
    public var queryableGeoHash: String?
    public var hiddenRadius: LocationQueryableHiddenRadius?
    public var address: Address?

    public init(name: String? = nil, placeId: String? = nil, queryableCoordinates: Coordinates? = nil, queryableGeoHash: String? = nil, hiddenRadius: LocationQueryableHiddenRadius? = nil, address: Address? = nil) {
        self.name = name
        self.placeId = placeId
        self.queryableCoordinates = queryableCoordinates
        self.queryableGeoHash = queryableGeoHash
        self.hiddenRadius = hiddenRadius
        self.address = address
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case placeId
        case queryableCoordinates
        case queryableGeoHash
        case hiddenRadius
        case address
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(placeId, forKey: .placeId)
        try container.encodeIfPresent(queryableCoordinates, forKey: .queryableCoordinates)
        try container.encodeIfPresent(queryableGeoHash, forKey: .queryableGeoHash)
        try container.encodeIfPresent(hiddenRadius, forKey: .hiddenRadius)
        try container.encodeIfPresent(address, forKey: .address)
    }
}

