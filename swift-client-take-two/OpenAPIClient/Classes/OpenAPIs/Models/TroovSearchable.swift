//
// TroovSearchable.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Subset of searchable fields on a troov */
public struct TroovSearchable: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var title: String?
    public var details: String?
    public var placeName: String? = ""
    public var isHiddenLocation: Bool?
    public var activityCategories: [String]?
    public var activitySubLabels: [String]?
    /** Users will assign free-form text tags to each date to improve searchability */
    public var tags: [String]?
    /** Unix timestamp (since Typesense doesn't support native datetime) */
    public var startTime: Int?
    /** Array of latitude and longitude */
    public var coordinates: [Double]?
    public var createdByGender: String?
    public var relationshipInterests: [String]?
    public var isTestTroov: Bool? = false

    public init(id: String? = nil, title: String? = nil, details: String? = nil, placeName: String? = "", isHiddenLocation: Bool? = nil, activityCategories: [String]? = nil, activitySubLabels: [String]? = nil, tags: [String]? = nil, startTime: Int? = nil, coordinates: [Double]? = nil, createdByGender: String? = nil, relationshipInterests: [String]? = nil, isTestTroov: Bool? = false) {
        self.id = id
        self.title = title
        self.details = details
        self.placeName = placeName
        self.isHiddenLocation = isHiddenLocation
        self.activityCategories = activityCategories
        self.activitySubLabels = activitySubLabels
        self.tags = tags
        self.startTime = startTime
        self.coordinates = coordinates
        self.createdByGender = createdByGender
        self.relationshipInterests = relationshipInterests
        self.isTestTroov = isTestTroov
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case title
        case details
        case placeName
        case isHiddenLocation
        case activityCategories
        case activitySubLabels
        case tags
        case startTime
        case coordinates
        case createdByGender
        case relationshipInterests
        case isTestTroov
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(details, forKey: .details)
        try container.encodeIfPresent(placeName, forKey: .placeName)
        try container.encodeIfPresent(isHiddenLocation, forKey: .isHiddenLocation)
        try container.encodeIfPresent(activityCategories, forKey: .activityCategories)
        try container.encodeIfPresent(activitySubLabels, forKey: .activitySubLabels)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(startTime, forKey: .startTime)
        try container.encodeIfPresent(coordinates, forKey: .coordinates)
        try container.encodeIfPresent(createdByGender, forKey: .createdByGender)
        try container.encodeIfPresent(relationshipInterests, forKey: .relationshipInterests)
        try container.encodeIfPresent(isTestTroov, forKey: .isTestTroov)
    }
}

