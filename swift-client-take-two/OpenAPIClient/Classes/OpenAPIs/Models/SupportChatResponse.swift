//
// SupportChatResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Only chats which are created from the troov support bot */
public struct SupportChatResponse: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var category: SupportCategoryType?
    public var originalMessage: String?
    public var response: String?
    public var categoryJustification: String?
    public var chatSessionId: String?
    public var categorizedAt: Date?
    public var requesterUserId: String?

    public init(id: String? = nil, category: SupportCategoryType? = nil, originalMessage: String? = nil, response: String? = nil, categoryJustification: String? = nil, chatSessionId: String? = nil, categorizedAt: Date? = nil, requesterUserId: String? = nil) {
        self.id = id
        self.category = category
        self.originalMessage = originalMessage
        self.response = response
        self.categoryJustification = categoryJustification
        self.chatSessionId = chatSessionId
        self.categorizedAt = categorizedAt
        self.requesterUserId = requesterUserId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case category
        case originalMessage
        case response
        case categoryJustification
        case chatSessionId
        case categorizedAt
        case requesterUserId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(category, forKey: .category)
        try container.encodeIfPresent(originalMessage, forKey: .originalMessage)
        try container.encodeIfPresent(response, forKey: .response)
        try container.encodeIfPresent(categoryJustification, forKey: .categoryJustification)
        try container.encodeIfPresent(chatSessionId, forKey: .chatSessionId)
        try container.encodeIfPresent(categorizedAt, forKey: .categorizedAt)
        try container.encodeIfPresent(requesterUserId, forKey: .requesterUserId)
    }
}

