//
// CacheHealthMetrics.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** cache health metrics */
public struct CacheHealthMetrics: Codable, JSONEncodable, Hashable {

    public var cacheName: String?
    public var cacheSizeMB: Int?
    public var cacheHitRate: Double?
    public var cacheMissRate: Double?
    public var cacheEvictionRate: Double?
    public var cacheHitCount: Int?
    public var cacheMissCount: Int?
    public var cacheEvictionCount: Int?
    public var cachePutCount: Int?
    public var cacheGetCount: Int?
    public var cacheRemoveCount: Int?
    public var cacheClearCount: Int?
    public var cacheHitRatePercentage: Double?
    public var cacheMissRatePercentage: Double?
    public var cacheEvictionRatePercentage: Double?
    public var cacheHitCountPercentage: Double?
    public var cacheMissCountPercentage: Double?
    public var cacheEvictionCountPercentage: Double?
    public var cachePutCountPercentage: Double?
    public var cacheGetCountPercentage: Double?
    public var cacheRemoveCountPercentage: Double?
    public var cacheClearCountPercentage: Double?

    public init(cacheName: String? = nil, cacheSizeMB: Int? = nil, cacheHitRate: Double? = nil, cacheMissRate: Double? = nil, cacheEvictionRate: Double? = nil, cacheHitCount: Int? = nil, cacheMissCount: Int? = nil, cacheEvictionCount: Int? = nil, cachePutCount: Int? = nil, cacheGetCount: Int? = nil, cacheRemoveCount: Int? = nil, cacheClearCount: Int? = nil, cacheHitRatePercentage: Double? = nil, cacheMissRatePercentage: Double? = nil, cacheEvictionRatePercentage: Double? = nil, cacheHitCountPercentage: Double? = nil, cacheMissCountPercentage: Double? = nil, cacheEvictionCountPercentage: Double? = nil, cachePutCountPercentage: Double? = nil, cacheGetCountPercentage: Double? = nil, cacheRemoveCountPercentage: Double? = nil, cacheClearCountPercentage: Double? = nil) {
        self.cacheName = cacheName
        self.cacheSizeMB = cacheSizeMB
        self.cacheHitRate = cacheHitRate
        self.cacheMissRate = cacheMissRate
        self.cacheEvictionRate = cacheEvictionRate
        self.cacheHitCount = cacheHitCount
        self.cacheMissCount = cacheMissCount
        self.cacheEvictionCount = cacheEvictionCount
        self.cachePutCount = cachePutCount
        self.cacheGetCount = cacheGetCount
        self.cacheRemoveCount = cacheRemoveCount
        self.cacheClearCount = cacheClearCount
        self.cacheHitRatePercentage = cacheHitRatePercentage
        self.cacheMissRatePercentage = cacheMissRatePercentage
        self.cacheEvictionRatePercentage = cacheEvictionRatePercentage
        self.cacheHitCountPercentage = cacheHitCountPercentage
        self.cacheMissCountPercentage = cacheMissCountPercentage
        self.cacheEvictionCountPercentage = cacheEvictionCountPercentage
        self.cachePutCountPercentage = cachePutCountPercentage
        self.cacheGetCountPercentage = cacheGetCountPercentage
        self.cacheRemoveCountPercentage = cacheRemoveCountPercentage
        self.cacheClearCountPercentage = cacheClearCountPercentage
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case cacheName
        case cacheSizeMB
        case cacheHitRate
        case cacheMissRate
        case cacheEvictionRate
        case cacheHitCount
        case cacheMissCount
        case cacheEvictionCount
        case cachePutCount
        case cacheGetCount
        case cacheRemoveCount
        case cacheClearCount
        case cacheHitRatePercentage
        case cacheMissRatePercentage
        case cacheEvictionRatePercentage
        case cacheHitCountPercentage
        case cacheMissCountPercentage
        case cacheEvictionCountPercentage
        case cachePutCountPercentage
        case cacheGetCountPercentage
        case cacheRemoveCountPercentage
        case cacheClearCountPercentage
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(cacheName, forKey: .cacheName)
        try container.encodeIfPresent(cacheSizeMB, forKey: .cacheSizeMB)
        try container.encodeIfPresent(cacheHitRate, forKey: .cacheHitRate)
        try container.encodeIfPresent(cacheMissRate, forKey: .cacheMissRate)
        try container.encodeIfPresent(cacheEvictionRate, forKey: .cacheEvictionRate)
        try container.encodeIfPresent(cacheHitCount, forKey: .cacheHitCount)
        try container.encodeIfPresent(cacheMissCount, forKey: .cacheMissCount)
        try container.encodeIfPresent(cacheEvictionCount, forKey: .cacheEvictionCount)
        try container.encodeIfPresent(cachePutCount, forKey: .cachePutCount)
        try container.encodeIfPresent(cacheGetCount, forKey: .cacheGetCount)
        try container.encodeIfPresent(cacheRemoveCount, forKey: .cacheRemoveCount)
        try container.encodeIfPresent(cacheClearCount, forKey: .cacheClearCount)
        try container.encodeIfPresent(cacheHitRatePercentage, forKey: .cacheHitRatePercentage)
        try container.encodeIfPresent(cacheMissRatePercentage, forKey: .cacheMissRatePercentage)
        try container.encodeIfPresent(cacheEvictionRatePercentage, forKey: .cacheEvictionRatePercentage)
        try container.encodeIfPresent(cacheHitCountPercentage, forKey: .cacheHitCountPercentage)
        try container.encodeIfPresent(cacheMissCountPercentage, forKey: .cacheMissCountPercentage)
        try container.encodeIfPresent(cacheEvictionCountPercentage, forKey: .cacheEvictionCountPercentage)
        try container.encodeIfPresent(cachePutCountPercentage, forKey: .cachePutCountPercentage)
        try container.encodeIfPresent(cacheGetCountPercentage, forKey: .cacheGetCountPercentage)
        try container.encodeIfPresent(cacheRemoveCountPercentage, forKey: .cacheRemoveCountPercentage)
        try container.encodeIfPresent(cacheClearCountPercentage, forKey: .cacheClearCountPercentage)
    }
}

