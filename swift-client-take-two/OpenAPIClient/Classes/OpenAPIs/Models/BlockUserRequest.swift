//
// BlockUserRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct BlockUserRequest: Codable, JSONEncodable, Hashable {

    static let blockedUserIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[\\w\\-\\|]+$/")
    static let blockerUserIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[\\w\\-\\|]+$/")
    static let uidRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[\\w\\-\\|]+$/")
    public var blockeDate: Date?
    public var blockedUserId: String?
    public var blockerUserId: String?
    public var uid: String?

    public init(blockeDate: Date? = nil, blockedUserId: String? = nil, blockerUserId: String? = nil, uid: String? = nil) {
        self.blockeDate = blockeDate
        self.blockedUserId = blockedUserId
        self.blockerUserId = blockerUserId
        self.uid = uid
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case blockeDate
        case blockedUserId
        case blockerUserId
        case uid
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(blockeDate, forKey: .blockeDate)
        try container.encodeIfPresent(blockedUserId, forKey: .blockedUserId)
        try container.encodeIfPresent(blockerUserId, forKey: .blockerUserId)
        try container.encodeIfPresent(uid, forKey: .uid)
    }
}

