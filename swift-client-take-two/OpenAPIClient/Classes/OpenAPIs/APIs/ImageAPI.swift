//
// ImageAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ImageAPI {

    /**
     * enum for parameter profilePhotosRanks
     */
    public enum ProfilePhotosRanks_cleanUploadProfilePhotos: String, CaseIterable {
        case _0 = "0"
        case _1 = "1"
        case _2 = "2"
        case _3 = "3"
        case _4 = "4"
        case _5 = "5"
    }

    /**
     Remove existing profile photos and upload new ones
     
     - parameter userId: (path) The User Id 
     - parameter profilePhotos: (form)  (optional)
     - parameter profilePhotosRanks: (form)  (optional, default to ._0)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func cleanUploadProfilePhotos(userId: String, profilePhotos: [URL]? = nil, profilePhotosRanks: [ProfilePhotosRanks_cleanUploadProfilePhotos]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return cleanUploadProfilePhotosWithRequestBuilder(userId: userId, profilePhotos: profilePhotos, profilePhotosRanks: profilePhotosRanks).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove existing profile photos and upload new ones
     - POST /image/cleanUpload/profilePhotos/{userId}
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter userId: (path) The User Id 
     - parameter profilePhotos: (form)  (optional)
     - parameter profilePhotosRanks: (form)  (optional, default to ._0)
     - returns: RequestBuilder<Void> 
     */
    open class func cleanUploadProfilePhotosWithRequestBuilder(userId: String, profilePhotos: [URL]? = nil, profilePhotosRanks: [ProfilePhotosRanks_cleanUploadProfilePhotos]? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/image/cleanUpload/profilePhotos/{userId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "profilePhotos": profilePhotos?.encodeToJSON(),
            "profilePhotosRanks": profilePhotosRanks?.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete all of this users profile photos
     
     - parameter userId: (path) The User Id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteAllProfilePhotos(userId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteAllProfilePhotosWithRequestBuilder(userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete all of this users profile photos
     - DELETE /image/delete/profilePhotos/{userId}
     - Delete profile photos
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter userId: (path) The User Id 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteAllProfilePhotosWithRequestBuilder(userId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/image/delete/profilePhotos/{userId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete profile photo by url
     
     - parameter userId: (path) The User Id 
     - parameter imageKey: (path) Key of profile photo to be deleted 
     - parameter rank: (path) the rank of the profile photo to be deleted 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteProfilePhoto(userId: String, imageKey: String, rank: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteProfilePhotoWithRequestBuilder(userId: userId, imageKey: imageKey, rank: rank).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete profile photo by url
     - DELETE /image/delete/{userId}/{imageKey}/{rank}
     - Delete profile photo
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter userId: (path) The User Id 
     - parameter imageKey: (path) Key of profile photo to be deleted 
     - parameter rank: (path) the rank of the profile photo to be deleted 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteProfilePhotoWithRequestBuilder(userId: String, imageKey: String, rank: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/image/delete/{userId}/{imageKey}/{rank}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let imageKeyPreEscape = "\(APIHelper.mapValueToPathItem(imageKey))"
        let imageKeyPostEscape = imageKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{imageKey}", with: imageKeyPostEscape, options: .literal, range: nil)
        let rankPreEscape = "\(APIHelper.mapValueToPathItem(rank))"
        let rankPostEscape = rankPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{rank}", with: rankPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get low resolution image download url
     
     - parameter userId: (path) The User Id 
     - parameter imageKey: (path) The Image Key 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLowResProfilePhotoDownloadUrl(userId: String, imageKey: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getLowResProfilePhotoDownloadUrlWithRequestBuilder(userId: userId, imageKey: imageKey).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get low resolution image download url
     - GET /image/downloadUrl/lowRes/{userId}/{imageKey}
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter userId: (path) The User Id 
     - parameter imageKey: (path) The Image Key 
     - returns: RequestBuilder<Void> 
     */
    open class func getLowResProfilePhotoDownloadUrlWithRequestBuilder(userId: String, imageKey: String) -> RequestBuilder<Void> {
        var localVariablePath = "/image/downloadUrl/lowRes/{userId}/{imageKey}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let imageKeyPreEscape = "\(APIHelper.mapValueToPathItem(imageKey))"
        let imageKeyPostEscape = imageKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{imageKey}", with: imageKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get low resolution profile photos download urls
     
     - parameter userId: (path) The User Id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLowResProfilePhotosDownloadUrls(userId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getLowResProfilePhotosDownloadUrlsWithRequestBuilder(userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get low resolution profile photos download urls
     - GET /image/downloadUrl/lowRes/profilePhotos/{userId}
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter userId: (path) The User Id 
     - returns: RequestBuilder<Void> 
     */
    open class func getLowResProfilePhotosDownloadUrlsWithRequestBuilder(userId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/image/downloadUrl/lowRes/profilePhotos/{userId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get low resolution profile thumbnail download url
     
     - parameter userId: (path) The User Id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLowResProfileThumbnailDownloadUrl(userId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getLowResProfileThumbnailDownloadUrlWithRequestBuilder(userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get low resolution profile thumbnail download url
     - GET /image/downloadUrl/lowRes/profileThumbnail/{userId}
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter userId: (path) The User Id 
     - returns: RequestBuilder<Void> 
     */
    open class func getLowResProfileThumbnailDownloadUrlWithRequestBuilder(userId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/image/downloadUrl/lowRes/profileThumbnail/{userId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get image download url
     
     - parameter userId: (path) The User Id 
     - parameter imageKey: (path) The Image Key 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getProfilePhotoDownloadUrl(userId: String, imageKey: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getProfilePhotoDownloadUrlWithRequestBuilder(userId: userId, imageKey: imageKey).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get image download url
     - GET /image/downloadUrl/{userId}/{imageKey}
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter userId: (path) The User Id 
     - parameter imageKey: (path) The Image Key 
     - returns: RequestBuilder<Void> 
     */
    open class func getProfilePhotoDownloadUrlWithRequestBuilder(userId: String, imageKey: String) -> RequestBuilder<Void> {
        var localVariablePath = "/image/downloadUrl/{userId}/{imageKey}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let imageKeyPreEscape = "\(APIHelper.mapValueToPathItem(imageKey))"
        let imageKeyPostEscape = imageKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{imageKey}", with: imageKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get profile photos download urls
     
     - parameter userId: (path) The User Id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getProfilePhotosDownloadUrls(userId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getProfilePhotosDownloadUrlsWithRequestBuilder(userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get profile photos download urls
     - GET /image/downloadUrl/profilePhotos/{userId}
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter userId: (path) The User Id 
     - returns: RequestBuilder<Void> 
     */
    open class func getProfilePhotosDownloadUrlsWithRequestBuilder(userId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/image/downloadUrl/profilePhotos/{userId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter profilePhotoRank
     */
    public enum ProfilePhotoRank_uploadProfilePhoto: String, CaseIterable {
        case _0 = "0"
        case _1 = "1"
        case _2 = "2"
        case _3 = "3"
        case _4 = "4"
        case _5 = "5"
    }

    /**
     Save profile photo
     
     - parameter userId: (path) The User Id 
     - parameter profilePhoto: (form)  (optional)
     - parameter profilePhotoRank: (form)  (optional, default to ._0)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func uploadProfilePhoto(userId: String, profilePhoto: URL? = nil, profilePhotoRank: ProfilePhotoRank_uploadProfilePhoto? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return uploadProfilePhotoWithRequestBuilder(userId: userId, profilePhoto: profilePhoto, profilePhotoRank: profilePhotoRank).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Save profile photo
     - POST /image/upload/profilePhoto/{userId}
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter userId: (path) The User Id 
     - parameter profilePhoto: (form)  (optional)
     - parameter profilePhotoRank: (form)  (optional, default to ._0)
     - returns: RequestBuilder<Void> 
     */
    open class func uploadProfilePhotoWithRequestBuilder(userId: String, profilePhoto: URL? = nil, profilePhotoRank: ProfilePhotoRank_uploadProfilePhoto? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/image/upload/profilePhoto/{userId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "profilePhoto": profilePhoto?.encodeToJSON(),
            "profilePhotoRank": profilePhotoRank?.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter profilePhotosRanks
     */
    public enum ProfilePhotosRanks_uploadProfilePhotos: String, CaseIterable {
        case _0 = "0"
        case _1 = "1"
        case _2 = "2"
        case _3 = "3"
        case _4 = "4"
        case _5 = "5"
    }

    /**
     Save profile photos
     
     - parameter userId: (path) The User Id 
     - parameter profilePhotos: (form)  (optional)
     - parameter profilePhotosRanks: (form)  (optional, default to ._0)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func uploadProfilePhotos(userId: String, profilePhotos: [URL]? = nil, profilePhotosRanks: [ProfilePhotosRanks_uploadProfilePhotos]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return uploadProfilePhotosWithRequestBuilder(userId: userId, profilePhotos: profilePhotos, profilePhotosRanks: profilePhotosRanks).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Save profile photos
     - POST /image/upload/profilePhotos/{userId}
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter userId: (path) The User Id 
     - parameter profilePhotos: (form)  (optional)
     - parameter profilePhotosRanks: (form)  (optional, default to ._0)
     - returns: RequestBuilder<Void> 
     */
    open class func uploadProfilePhotosWithRequestBuilder(userId: String, profilePhotos: [URL]? = nil, profilePhotosRanks: [ProfilePhotosRanks_uploadProfilePhotos]? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/image/upload/profilePhotos/{userId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "profilePhotos": profilePhotos?.encodeToJSON(),
            "profilePhotosRanks": profilePhotosRanks?.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
