//
// NotifyAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class NotifyAPI {

    /**
     Get notifications since a given time
     
     - parameter userId: (path) ID of user notifications of interest 
     - parameter createdTime: (path) Time to get notifications since 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getNotificationsForUserSince(userId: String, createdTime: Date, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Notification]?, _ error: Error?) -> Void)) -> RequestTask {
        return getNotificationsForUserSinceWithRequestBuilder(userId: userId, createdTime: createdTime).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get notifications since a given time
     - GET /notify/notifications/{userId}/since/{createdTime}
     - Returns any notifications related to the user since the given time
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter userId: (path) ID of user notifications of interest 
     - parameter createdTime: (path) Time to get notifications since 
     - returns: RequestBuilder<[Notification]> 
     */
    open class func getNotificationsForUserSinceWithRequestBuilder(userId: String, createdTime: Date) -> RequestBuilder<[Notification]> {
        var localVariablePath = "/notify/notifications/{userId}/since/{createdTime}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let createdTimePreEscape = "\(APIHelper.mapValueToPathItem(createdTime))"
        let createdTimePostEscape = createdTimePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{createdTime}", with: createdTimePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Notification]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Long poll for chat session updates
     
     - parameter userId: (path) ID of user chat sessions of interest 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func longPollChatSessions(userId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ChatSession]?, _ error: Error?) -> Void)) -> RequestTask {
        return longPollChatSessionsWithRequestBuilder(userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Long poll for chat session updates
     - GET /notify/notifications/chatSessions/{userId}/longPolling
     - Returns any chat session updates related to the user
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter userId: (path) ID of user chat sessions of interest 
     - returns: RequestBuilder<[ChatSession]> 
     */
    open class func longPollChatSessionsWithRequestBuilder(userId: String) -> RequestBuilder<[ChatSession]> {
        var localVariablePath = "/notify/notifications/chatSessions/{userId}/longPolling"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ChatSession]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Long poll for notifications
     
     - parameter userId: (path) ID of user notifications of interest 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func longPollNotifications(userId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Notification]?, _ error: Error?) -> Void)) -> RequestTask {
        return longPollNotificationsWithRequestBuilder(userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Long poll for notifications
     - GET /notify/notifications/{userId}/longPolling
     - Returns any notifications related to the user
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter userId: (path) ID of user notifications of interest 
     - returns: RequestBuilder<[Notification]> 
     */
    open class func longPollNotificationsWithRequestBuilder(userId: String) -> RequestBuilder<[Notification]> {
        var localVariablePath = "/notify/notifications/{userId}/longPolling"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Notification]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Long poll for troov match requests
     
     - parameter userId: (path) ID of user chat sessions of interest 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func longPollTroovMatchRequests(userId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Troov?, _ error: Error?) -> Void)) -> RequestTask {
        return longPollTroovMatchRequestsWithRequestBuilder(userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Long poll for troov match requests
     - GET /notify/notifications/troovMatchRequests/{userId}/longPolling
     - Returns any troov match requests related to the user
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter userId: (path) ID of user chat sessions of interest 
     - returns: RequestBuilder<Troov> 
     */
    open class func longPollTroovMatchRequestsWithRequestBuilder(userId: String) -> RequestBuilder<Troov> {
        var localVariablePath = "/notify/notifications/troovMatchRequests/{userId}/longPolling"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Troov>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
