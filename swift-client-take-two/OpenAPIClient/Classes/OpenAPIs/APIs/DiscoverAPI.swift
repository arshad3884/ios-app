//
// DiscoverAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DiscoverAPI {

    /**
     Get all active tags
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func discoverTagsActiveGet(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Troov]?, _ error: Error?) -> Void)) -> RequestTask {
        return discoverTagsActiveGetWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all active tags
     - GET /discover/tags/active
     - Returns all tags which have active troovs
     - BASIC:
       - type: http
       - name: BearerAuth
     - returns: RequestBuilder<[Troov]> 
     */
    open class func discoverTagsActiveGetWithRequestBuilder() -> RequestBuilder<[Troov]> {
        let localVariablePath = "/discover/tags/active"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Troov]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get the most popular n tags
     
     - parameter n: (path) return this number of tags 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func discoverTagsMostPopularNGet(n: Double, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Troov]?, _ error: Error?) -> Void)) -> RequestTask {
        return discoverTagsMostPopularNGetWithRequestBuilder(n: n).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get the most popular n tags
     - GET /discover/tags/mostPopular/{n}
     - Returns the most popular n tags
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter n: (path) return this number of tags 
     - returns: RequestBuilder<[Troov]> 
     */
    open class func discoverTagsMostPopularNGetWithRequestBuilder(n: Double) -> RequestBuilder<[Troov]> {
        var localVariablePath = "/discover/tags/mostPopular/{n}"
        let nPreEscape = "\(APIHelper.mapValueToPathItem(n))"
        let nPostEscape = nPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{n}", with: nPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Troov]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Find all troovs relevant to a given tag
     
     - parameter tagName: (path) Get recommended troovs for this tagName 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func discoverTroovsByTagName(tagName: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Troov]?, _ error: Error?) -> Void)) -> RequestTask {
        return discoverTroovsByTagNameWithRequestBuilder(tagName: tagName).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Find all troovs relevant to a given tag
     - GET /discover/troovs/byTag/{tagName}
     - Returns an array of troovs
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter tagName: (path) Get recommended troovs for this tagName 
     - returns: RequestBuilder<[Troov]> 
     */
    open class func discoverTroovsByTagNameWithRequestBuilder(tagName: String) -> RequestBuilder<[Troov]> {
        var localVariablePath = "/discover/troovs/byTag/{tagName}"
        let tagNamePreEscape = "\(APIHelper.mapValueToPathItem(tagName))"
        let tagNamePostEscape = tagNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{tagName}", with: tagNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Troov]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Find recommended troovs for a given user
     
     - parameter userId: (path) Get recommended troovs for this userId 
     - parameter discoverFilterSettings: (body) Filter to be applied on the discover query 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func discoverTroovsByUserId(userId: String, discoverFilterSettings: DiscoverFilterSettings, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DiscoverTroovsResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return discoverTroovsByUserIdWithRequestBuilder(userId: userId, discoverFilterSettings: discoverFilterSettings).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Find recommended troovs for a given user
     - POST /discover/troovs/{userId}
     - Returns an array of troovs
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter userId: (path) Get recommended troovs for this userId 
     - parameter discoverFilterSettings: (body) Filter to be applied on the discover query 
     - returns: RequestBuilder<DiscoverTroovsResponse> 
     */
    open class func discoverTroovsByUserIdWithRequestBuilder(userId: String, discoverFilterSettings: DiscoverFilterSettings) -> RequestBuilder<DiscoverTroovsResponse> {
        var localVariablePath = "/discover/troovs/{userId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: discoverFilterSettings)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DiscoverTroovsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get all troovs matching the search terms
     
     - parameter searchTerms: (path) Get recommended troovs for these search terms 
     - parameter limit: (query) The max numbers of troovs to return per request (optional)
     - parameter includeTestTroovs: (query) Include test troovs in the search results (optional)
     - parameter queryLatitude: (query) The latitude of the user (optional)
     - parameter queryLongitude: (query) The longitude of the user (optional)
     - parameter queryRadius: (query) The radius of the search in km (optional)
     - parameter sortBy: (query) The field to sort by (optional)
     - parameter limit2: (query) The max numbers of troovs to return per request (optional, default to 50)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func discoverTroovsSearchSearchTermsGet(searchTerms: String, limit: Int? = nil, includeTestTroovs: Bool? = nil, queryLatitude: Double? = nil, queryLongitude: Double? = nil, queryRadius: Double? = nil, sortBy: PaginationOrder? = nil, limit2: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Troov]?, _ error: Error?) -> Void)) -> RequestTask {
        return discoverTroovsSearchSearchTermsGetWithRequestBuilder(searchTerms: searchTerms, limit: limit, includeTestTroovs: includeTestTroovs, queryLatitude: queryLatitude, queryLongitude: queryLongitude, queryRadius: queryRadius, sortBy: sortBy, limit2: limit2).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all troovs matching the search terms
     - GET /discover/troovs/search/{searchTerms}
     - Returns all troovs matching the search terms
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter searchTerms: (path) Get recommended troovs for these search terms 
     - parameter limit: (query) The max numbers of troovs to return per request (optional)
     - parameter includeTestTroovs: (query) Include test troovs in the search results (optional)
     - parameter queryLatitude: (query) The latitude of the user (optional)
     - parameter queryLongitude: (query) The longitude of the user (optional)
     - parameter queryRadius: (query) The radius of the search in km (optional)
     - parameter sortBy: (query) The field to sort by (optional)
     - parameter limit2: (query) The max numbers of troovs to return per request (optional, default to 50)
     - returns: RequestBuilder<[Troov]> 
     */
    open class func discoverTroovsSearchSearchTermsGetWithRequestBuilder(searchTerms: String, limit: Int? = nil, includeTestTroovs: Bool? = nil, queryLatitude: Double? = nil, queryLongitude: Double? = nil, queryRadius: Double? = nil, sortBy: PaginationOrder? = nil, limit2: Int? = nil) -> RequestBuilder<[Troov]> {
        var localVariablePath = "/discover/troovs/search/{searchTerms}"
        let searchTermsPreEscape = "\(APIHelper.mapValueToPathItem(searchTerms))"
        let searchTermsPostEscape = searchTermsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{searchTerms}", with: searchTermsPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "includeTestTroovs": (wrappedValue: includeTestTroovs?.encodeToJSON(), isExplode: true),
            "queryLatitude": (wrappedValue: queryLatitude?.encodeToJSON(), isExplode: true),
            "queryLongitude": (wrappedValue: queryLongitude?.encodeToJSON(), isExplode: true),
            "queryRadius": (wrappedValue: queryRadius?.encodeToJSON(), isExplode: true),
            "sortBy": (wrappedValue: sortBy?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit2?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Troov]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get activity suggestions
     
     - parameter userId: (path) Get activity suggestions for this userId 
     - parameter coordinates: (body) Location of the user 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getActivitySuggestions(userId: String, coordinates: Coordinates, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ActivitySuggestion]?, _ error: Error?) -> Void)) -> RequestTask {
        return getActivitySuggestionsWithRequestBuilder(userId: userId, coordinates: coordinates).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get activity suggestions
     - GET /discover/activitySuggestions/{userId}
     - Returns an array of activity suggestions
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter userId: (path) Get activity suggestions for this userId 
     - parameter coordinates: (body) Location of the user 
     - returns: RequestBuilder<[ActivitySuggestion]> 
     */
    open class func getActivitySuggestionsWithRequestBuilder(userId: String, coordinates: Coordinates) -> RequestBuilder<[ActivitySuggestion]> {
        var localVariablePath = "/discover/activitySuggestions/{userId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: coordinates)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ActivitySuggestion]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
