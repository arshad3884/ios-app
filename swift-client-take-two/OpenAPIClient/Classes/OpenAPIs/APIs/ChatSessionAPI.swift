//
// ChatSessionAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ChatSessionAPI {

    /**
     add a chat to a chat session
     
     - parameter chatSessionId: (path) ID of the chat session 
     - parameter chat: (body) New chat message to be added 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func addChatToChatSession(chatSessionId: String, chat: Chat, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Chat]?, _ error: Error?) -> Void)) -> RequestTask {
        return addChatToChatSessionWithRequestBuilder(chatSessionId: chatSessionId, chat: chat).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     add a chat to a chat session
     - POST /chatSession/{chatSessionId}/addChat
     - Returns all chats for a given user
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter chatSessionId: (path) ID of the chat session 
     - parameter chat: (body) New chat message to be added 
     - returns: RequestBuilder<[Chat]> 
     */
    open class func addChatToChatSessionWithRequestBuilder(chatSessionId: String, chat: Chat) -> RequestBuilder<[Chat]> {
        var localVariablePath = "/chatSession/{chatSessionId}/addChat"
        let chatSessionIdPreEscape = "\(APIHelper.mapValueToPathItem(chatSessionId))"
        let chatSessionIdPostEscape = chatSessionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{chatSessionId}", with: chatSessionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: chat)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Chat]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a new chatSession
     
     - parameter chatSession: (body) New chatSession to be created 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createChatSession(chatSession: ChatSession, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return createChatSessionWithRequestBuilder(chatSession: chatSession).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a new chatSession
     - POST /chatSession/create
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter chatSession: (body) New chatSession to be created 
     - returns: RequestBuilder<Void> 
     */
    open class func createChatSessionWithRequestBuilder(chatSession: ChatSession) -> RequestBuilder<Void> {
        let localVariablePath = "/chatSession/create"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: chatSession)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Deletes all chat sessions associate with the user id
     
     - parameter userId: (path) ID of user 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteAllChatSessionsForUser(userId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteAllChatSessionsForUserWithRequestBuilder(userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Deletes all chat sessions associate with the user id
     - DELETE /chatSession/deleteAllChatSessionsForUser/{userId}
     - Deletes all chat sessions associate with the user id
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter userId: (path) ID of user 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteAllChatSessionsForUserWithRequestBuilder(userId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/chatSession/deleteAllChatSessionsForUser/{userId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete a chatSession
     
     - parameter chatSessionId: (path) ID of chatSession 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteChatSession(chatSessionId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteChatSessionWithRequestBuilder(chatSessionId: chatSessionId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a chatSession
     - DELETE /chatSession/delete/{chatSessionId}
     - Deletes a chatSession
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter chatSessionId: (path) ID of chatSession 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteChatSessionWithRequestBuilder(chatSessionId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/chatSession/delete/{chatSessionId}"
        let chatSessionIdPreEscape = "\(APIHelper.mapValueToPathItem(chatSessionId))"
        let chatSessionIdPostEscape = chatSessionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{chatSessionId}", with: chatSessionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get all active chat sessions for user
     
     - parameter userId: (path) userId for which to get active chats 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getActiveChatSessionsWithUser(userId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ChatSession]?, _ error: Error?) -> Void)) -> RequestTask {
        return getActiveChatSessionsWithUserWithRequestBuilder(userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all active chat sessions for user
     - GET /chatSession/active/{userId}
     - Returns an array of a users chatSession
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter userId: (path) userId for which to get active chats 
     - returns: RequestBuilder<[ChatSession]> 
     */
    open class func getActiveChatSessionsWithUserWithRequestBuilder(userId: String) -> RequestBuilder<[ChatSession]> {
        var localVariablePath = "/chatSession/active/{userId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ChatSession]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get all chat sessions for user
     
     - parameter userId: (path) userId for which to get active chats 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAllChatSessionsWithUser(userId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ChatSession]?, _ error: Error?) -> Void)) -> RequestTask {
        return getAllChatSessionsWithUserWithRequestBuilder(userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all chat sessions for user
     - GET /chatSession/all/{userId}
     - Returns an array of a users chatSession
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter userId: (path) userId for which to get active chats 
     - returns: RequestBuilder<[ChatSession]> 
     */
    open class func getAllChatSessionsWithUserWithRequestBuilder(userId: String) -> RequestBuilder<[ChatSession]> {
        var localVariablePath = "/chatSession/all/{userId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ChatSession]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Find a chatSession by ID
     
     - parameter chatSessionId: (path) ID of chatSession 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getChatSessionById(chatSessionId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ChatSession?, _ error: Error?) -> Void)) -> RequestTask {
        return getChatSessionByIdWithRequestBuilder(chatSessionId: chatSessionId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Find a chatSession by ID
     - GET /chatSession/{chatSessionId}
     - Returns a single chatSession
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter chatSessionId: (path) ID of chatSession 
     - returns: RequestBuilder<ChatSession> 
     */
    open class func getChatSessionByIdWithRequestBuilder(chatSessionId: String) -> RequestBuilder<ChatSession> {
        var localVariablePath = "/chatSession/{chatSessionId}"
        let chatSessionIdPreEscape = "\(APIHelper.mapValueToPathItem(chatSessionId))"
        let chatSessionIdPostEscape = chatSessionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{chatSessionId}", with: chatSessionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ChatSession>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     update the latest chat view time for this user
     
     - parameter chatSessionId: (path) ID of chatSession 
     - parameter userId: (path) userId for which to get active chats 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateLatestViewedTime(chatSessionId: String, userId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return updateLatestViewedTimeWithRequestBuilder(chatSessionId: chatSessionId, userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     update the latest chat view time for this user
     - PUT /chatSession/{chatSessionId}/viewedBy/{userId}
     - update the latest chat view time for this user
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter chatSessionId: (path) ID of chatSession 
     - parameter userId: (path) userId for which to get active chats 
     - returns: RequestBuilder<Void> 
     */
    open class func updateLatestViewedTimeWithRequestBuilder(chatSessionId: String, userId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/chatSession/{chatSessionId}/viewedBy/{userId}"
        let chatSessionIdPreEscape = "\(APIHelper.mapValueToPathItem(chatSessionId))"
        let chatSessionIdPostEscape = chatSessionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{chatSessionId}", with: chatSessionIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
