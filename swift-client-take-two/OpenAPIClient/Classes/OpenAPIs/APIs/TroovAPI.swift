//
// TroovAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class TroovAPI {

    /**
     Cancel troov user
     
     - parameter troovId: (path) Id of troov 
     - parameter userId: (path) Id of user to be confirmed 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func acceptJoinRequestFromUser(troovId: String, userId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return acceptJoinRequestFromUserWithRequestBuilder(troovId: troovId, userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Cancel troov user
     - PUT /troov/{troovId}/confirm/{userId}
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter troovId: (path) Id of troov 
     - parameter userId: (path) Id of user to be confirmed 
     - returns: RequestBuilder<Void> 
     */
    open class func acceptJoinRequestFromUserWithRequestBuilder(troovId: String, userId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/troov/{troovId}/confirm/{userId}"
        let troovIdPreEscape = "\(APIHelper.mapValueToPathItem(troovId))"
        let troovIdPostEscape = troovIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{troovId}", with: troovIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Cancel user's troov
     
     - parameter troovId: (path) Id of troov 
     - parameter userId: (path) Id of user 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func cancelTroovForUser(troovId: String, userId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return cancelTroovForUserWithRequestBuilder(troovId: troovId, userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Cancel user's troov
     - PUT /troov/{troovId}/cancelTroovForUser/{userId}
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter troovId: (path) Id of troov 
     - parameter userId: (path) Id of user 
     - returns: RequestBuilder<Void> 
     */
    open class func cancelTroovForUserWithRequestBuilder(troovId: String, userId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/troov/{troovId}/cancelTroovForUser/{userId}"
        let troovIdPreEscape = "\(APIHelper.mapValueToPathItem(troovId))"
        let troovIdPostEscape = troovIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{troovId}", with: troovIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Cancel user join request for this troov
     
     - parameter troovId: (path) Id of troov 
     - parameter userId: (path) Id of user 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func cancelTroovJoinRequestForUser(troovId: String, userId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return cancelTroovJoinRequestForUserWithRequestBuilder(troovId: troovId, userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Cancel user join request for this troov
     - PUT /troov/{troovId}/cancelJoinRequestForUser/{userId}
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter troovId: (path) Id of troov 
     - parameter userId: (path) Id of user 
     - returns: RequestBuilder<Void> 
     */
    open class func cancelTroovJoinRequestForUserWithRequestBuilder(troovId: String, userId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/troov/{troovId}/cancelJoinRequestForUser/{userId}"
        let troovIdPreEscape = "\(APIHelper.mapValueToPathItem(troovId))"
        let troovIdPostEscape = troovIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{troovId}", with: troovIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a new troov date for this user
     
     - parameter troov: (body) New troov to be created 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createTroovForUser(troov: Troov, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return createTroovForUserWithRequestBuilder(troov: troov).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a new troov date for this user
     - POST /troov/create
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter troov: (body) New troov to be created 
     - returns: RequestBuilder<Void> 
     */
    open class func createTroovForUserWithRequestBuilder(troov: Troov) -> RequestBuilder<Void> {
        let localVariablePath = "/troov/create"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: troov)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Decline join request from user
     
     - parameter troovId: (path) Id of troov 
     - parameter userId: (path) Id of user 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func declineJoinRequestFromUser(troovId: String, userId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return declineJoinRequestFromUserWithRequestBuilder(troovId: troovId, userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Decline join request from user
     - PUT /troov/{troovId}/declineJoinRequestFromUser/{userId}
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter troovId: (path) Id of troov 
     - parameter userId: (path) Id of user 
     - returns: RequestBuilder<Void> 
     */
    open class func declineJoinRequestFromUserWithRequestBuilder(troovId: String, userId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/troov/{troovId}/declineJoinRequestFromUser/{userId}"
        let troovIdPreEscape = "\(APIHelper.mapValueToPathItem(troovId))"
        let troovIdPostEscape = troovIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{troovId}", with: troovIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete a troov
     
     - parameter troovId: (path) ID of troov 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteTroov(troovId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteTroovWithRequestBuilder(troovId: troovId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a troov
     - DELETE /troov/delete/{troovId}
     - Deletes a troov
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter troovId: (path) ID of troov 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteTroovWithRequestBuilder(troovId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/troov/delete/{troovId}"
        let troovIdPreEscape = "\(APIHelper.mapValueToPathItem(troovId))"
        let troovIdPostEscape = troovIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{troovId}", with: troovIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get all troovs with status completed for user
     
     - parameter userId: (path) ID of user profile 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAllCompletedTroovs(userId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Troov]?, _ error: Error?) -> Void)) -> RequestTask {
        return getAllCompletedTroovsWithRequestBuilder(userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all troovs with status completed for user
     - GET /troov/status/completed/{userId}
     - Returns a list of all user's completed troovs
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter userId: (path) ID of user profile 
     - returns: RequestBuilder<[Troov]> 
     */
    open class func getAllCompletedTroovsWithRequestBuilder(userId: String) -> RequestBuilder<[Troov]> {
        var localVariablePath = "/troov/status/completed/{userId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Troov]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get all troovs with status confirmed and pending review for user
     
     - parameter userId: (path) ID of user profile 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAllConfirmedAndPendingReviewTroovs(userId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Troov]?, _ error: Error?) -> Void)) -> RequestTask {
        return getAllConfirmedAndPendingReviewTroovsWithRequestBuilder(userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all troovs with status confirmed and pending review for user
     - GET /troov/status/confirmedAndPendingReview/{userId}
     - Returns a list of all user's confirmed and pending review troovs
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter userId: (path) ID of user profile 
     - returns: RequestBuilder<[Troov]> 
     */
    open class func getAllConfirmedAndPendingReviewTroovsWithRequestBuilder(userId: String) -> RequestBuilder<[Troov]> {
        var localVariablePath = "/troov/status/confirmedAndPendingReview/{userId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Troov]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get all troovs with status confirmed for user
     
     - parameter userId: (path) ID of user profile 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAllConfirmedTroovs(userId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Troov]?, _ error: Error?) -> Void)) -> RequestTask {
        return getAllConfirmedTroovsWithRequestBuilder(userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all troovs with status confirmed for user
     - GET /troov/status/confirmed/{userId}
     - Returns a list of all user's confirmed troovs
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter userId: (path) ID of user profile 
     - returns: RequestBuilder<[Troov]> 
     */
    open class func getAllConfirmedTroovsWithRequestBuilder(userId: String) -> RequestBuilder<[Troov]> {
        var localVariablePath = "/troov/status/confirmed/{userId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Troov]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get all troovs created by the user with status OPEN
     
     - parameter userId: (path) ID of user profile 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAllPendingTroovs(userId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Troov]?, _ error: Error?) -> Void)) -> RequestTask {
        return getAllPendingTroovsWithRequestBuilder(userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all troovs created by the user with status OPEN
     - GET /troov/status/open/{userId}
     - Returns a list of all user's created troovs with status OPEN
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter userId: (path) ID of user profile 
     - returns: RequestBuilder<[Troov]> 
     */
    open class func getAllPendingTroovsWithRequestBuilder(userId: String) -> RequestBuilder<[Troov]> {
        var localVariablePath = "/troov/status/open/{userId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Troov]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get all match requests which are pending for this troov
     
     - parameter troovId: (path) Id of troov 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPendingMatchRequestsForTroov(troovId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [TroovMatchRequest]?, _ error: Error?) -> Void)) -> RequestTask {
        return getPendingMatchRequestsForTroovWithRequestBuilder(troovId: troovId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all match requests which are pending for this troov
     - GET /troov/{troovId}/pendingMatchRequests
     - Returns all troov's pending match requests
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter troovId: (path) Id of troov 
     - returns: RequestBuilder<[TroovMatchRequest]> 
     */
    open class func getPendingMatchRequestsForTroovWithRequestBuilder(troovId: String) -> RequestBuilder<[TroovMatchRequest]> {
        var localVariablePath = "/troov/{troovId}/pendingMatchRequests"
        let troovIdPreEscape = "\(APIHelper.mapValueToPathItem(troovId))"
        let troovIdPostEscape = troovIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{troovId}", with: troovIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TroovMatchRequest]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get all troovs created by this user with status open
     
     - parameter userId: (path) Id of user 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPendingTroovPicksForUser(userId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Troov]?, _ error: Error?) -> Void)) -> RequestTask {
        return getPendingTroovPicksForUserWithRequestBuilder(userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all troovs created by this user with status open
     - GET /troov/createdBy/{userId}/status/open
     - Returns all user's open picks
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter userId: (path) Id of user 
     - returns: RequestBuilder<[Troov]> 
     */
    open class func getPendingTroovPicksForUserWithRequestBuilder(userId: String) -> RequestBuilder<[Troov]> {
        var localVariablePath = "/troov/createdBy/{userId}/status/open"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Troov]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get all troov activity taxonomy
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getTroovActivityTaxonomy(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [TroovActivity]?, _ error: Error?) -> Void)) -> RequestTask {
        return getTroovActivityTaxonomyWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all troov activity taxonomy
     - GET /troov/getTroovActivityTaxonomy
     - Returns all troov activity taxonomy
     - BASIC:
       - type: http
       - name: BearerAuth
     - returns: RequestBuilder<[TroovActivity]> 
     */
    open class func getTroovActivityTaxonomyWithRequestBuilder() -> RequestBuilder<[TroovActivity]> {
        let localVariablePath = "/troov/getTroovActivityTaxonomy"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TroovActivity]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Find a troov by ID
     
     - parameter troovId: (path) ID of troov 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getTroovById(troovId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Troov?, _ error: Error?) -> Void)) -> RequestTask {
        return getTroovByIdWithRequestBuilder(troovId: troovId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Find a troov by ID
     - GET /troov/{troovId}
     - Returns a single troov date
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter troovId: (path) ID of troov 
     - returns: RequestBuilder<Troov> 
     */
    open class func getTroovByIdWithRequestBuilder(troovId: String) -> RequestBuilder<Troov> {
        var localVariablePath = "/troov/{troovId}"
        let troovIdPreEscape = "\(APIHelper.mapValueToPathItem(troovId))"
        let troovIdPostEscape = troovIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{troovId}", with: troovIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Troov>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Find a troov by ID with image download URLs
     
     - parameter troovId: (path) ID of troov 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getTroovByIdWithImageDownloadUrls(troovId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Troov?, _ error: Error?) -> Void)) -> RequestTask {
        return getTroovByIdWithImageDownloadUrlsWithRequestBuilder(troovId: troovId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Find a troov by ID with image download URLs
     - GET /troov/{troovId}/withImageDownloadUrls
     - Returns a single troov date with image download URLs
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter troovId: (path) ID of troov 
     - returns: RequestBuilder<Troov> 
     */
    open class func getTroovByIdWithImageDownloadUrlsWithRequestBuilder(troovId: String) -> RequestBuilder<Troov> {
        var localVariablePath = "/troov/{troovId}/withImageDownloadUrls"
        let troovIdPreEscape = "\(APIHelper.mapValueToPathItem(troovId))"
        let troovIdPostEscape = troovIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{troovId}", with: troovIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Troov>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get all troovs created by this user
     
     - parameter userId: (path) Id of user 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getTroovsCreatedByUser(userId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Troov]?, _ error: Error?) -> Void)) -> RequestTask {
        return getTroovsCreatedByUserWithRequestBuilder(userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all troovs created by this user
     - GET /troov/createdBy/{userId}
     - Returns all user's troovs
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter userId: (path) Id of user 
     - returns: RequestBuilder<[Troov]> 
     */
    open class func getTroovsCreatedByUserWithRequestBuilder(userId: String) -> RequestBuilder<[Troov]> {
        var localVariablePath = "/troov/createdBy/{userId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Troov]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get all troovs with a pending join request for this user
     
     - parameter userId: (path) Id of user 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getTroovsWithPendingJoinRequestsForUser(userId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Troov]?, _ error: Error?) -> Void)) -> RequestTask {
        return getTroovsWithPendingJoinRequestsForUserWithRequestBuilder(userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all troovs with a pending join request for this user
     - GET /troov/getTroovsWithPendingJoinRequestsForUser/{userId}
     - Returns all user's pending join requests
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter userId: (path) Id of user 
     - returns: RequestBuilder<[Troov]> 
     */
    open class func getTroovsWithPendingJoinRequestsForUserWithRequestBuilder(userId: String) -> RequestBuilder<[Troov]> {
        var localVariablePath = "/troov/getTroovsWithPendingJoinRequestsForUser/{userId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Troov]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Mark troov as viewed by user
     
     - parameter troovId: (path) Id of troov 
     - parameter userId: (path) Id of user 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func markTroovAsViewedByUser(troovId: String, userId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return markTroovAsViewedByUserWithRequestBuilder(troovId: troovId, userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Mark troov as viewed by user
     - PUT /troov/{troovId}/viewedBy/{userId}
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter troovId: (path) Id of troov 
     - parameter userId: (path) Id of user 
     - returns: RequestBuilder<Void> 
     */
    open class func markTroovAsViewedByUserWithRequestBuilder(troovId: String, userId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/troov/{troovId}/viewedBy/{userId}"
        let troovIdPreEscape = "\(APIHelper.mapValueToPathItem(troovId))"
        let troovIdPostEscape = troovIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{troovId}", with: troovIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update troov with interested user
     
     - parameter troovId: (path) Id of troov 
     - parameter userId: (path) Id of user 
     - parameter chat: (body) Opening chat message if applicable (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func requestToJoinTroov(troovId: String, userId: String, chat: Chat? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return requestToJoinTroovWithRequestBuilder(troovId: troovId, userId: userId, chat: chat).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update troov with interested user
     - PUT /troov/{troovId}/requestToJoinTroov/{userId}
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter troovId: (path) Id of troov 
     - parameter userId: (path) Id of user 
     - parameter chat: (body) Opening chat message if applicable (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func requestToJoinTroovWithRequestBuilder(troovId: String, userId: String, chat: Chat? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/troov/{troovId}/requestToJoinTroov/{userId}"
        let troovIdPreEscape = "\(APIHelper.mapValueToPathItem(troovId))"
        let troovIdPostEscape = troovIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{troovId}", with: troovIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: chat)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Review a troov participant
     
     - parameter troovId: (path) Id of troov 
     - parameter userId: (path) Id of user 
     - parameter troovReview: (body) New troov to be created (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func reviewFromParticipant(troovId: String, userId: String, troovReview: TroovReview? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return reviewFromParticipantWithRequestBuilder(troovId: troovId, userId: userId, troovReview: troovReview).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Review a troov participant
     - PUT /troov/{troovId}/reviewFromParticipant/{userId}
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter troovId: (path) Id of troov 
     - parameter userId: (path) Id of user 
     - parameter troovReview: (body) New troov to be created (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func reviewFromParticipantWithRequestBuilder(troovId: String, userId: String, troovReview: TroovReview? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/troov/{troovId}/reviewFromParticipant/{userId}"
        let troovIdPreEscape = "\(APIHelper.mapValueToPathItem(troovId))"
        let troovIdPostEscape = troovIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{troovId}", with: troovIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: troovReview)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update an existing troov
     
     - parameter troovId: (path) ID of troov 
     - parameter troov: (body) Troov with updated details. Will only update fields provided 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateTroov(troovId: String, troov: Troov, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return updateTroovWithRequestBuilder(troovId: troovId, troov: troov).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update an existing troov
     - PUT /troov/{troovId}
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter troovId: (path) ID of troov 
     - parameter troov: (body) Troov with updated details. Will only update fields provided 
     - returns: RequestBuilder<Void> 
     */
    open class func updateTroovWithRequestBuilder(troovId: String, troov: Troov) -> RequestBuilder<Void> {
        var localVariablePath = "/troov/{troovId}"
        let troovIdPreEscape = "\(APIHelper.mapValueToPathItem(troovId))"
        let troovIdPostEscape = troovIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{troovId}", with: troovIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: troov)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
